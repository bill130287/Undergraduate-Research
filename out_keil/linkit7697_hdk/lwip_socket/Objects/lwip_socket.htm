<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\..\..\..\out_keil\linkit7697_hdk\lwip_socket\Objects\lwip_socket.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\..\..\..\out_keil\linkit7697_hdk\lwip_socket\Objects\lwip_socket.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Thu Jun 13 14:14:30 2019
<BR><P>
<H3>Maximum Stack Usage =        632 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MPU_READ &rArr; hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[26]">hal_gpt_get_free_run_count</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">log_hal_error_internal</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">BusFault_Handler</a> from exception_handler.o(.ramTEXT) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[6]">CachePreInit</a> from system_mt7687.o(i.CachePreInit) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[3]">DMA_ERROR_LISR</a> from dma.o(i.DMA_ERROR_LISR) referenced 6 times from dma.o(.data)
 <LI><a href="#[1a]">DebugMon_Handler</a> from exception_handler.o(.ramTEXT) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[f]">Flash_ReturnReady</a> from flash_sfc.o(.ramTEXT) referenced 5 times from port.o(.ramTEXT)
 <LI><a href="#[a]">GPT_INT_Handler</a> from gpt.o(i.GPT_INT_Handler) referenced from gpt.o(i.GPT_init)
 <LI><a href="#[15]">HardFault_Handler</a> from exception_handler.o(.ramTEXT) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[16]">MemManage_Handler</a> from exception_handler.o(.ramTEXT) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[14]">NMI_Handler</a> from exception_handler.o(i.NMI_Handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[11]">PendSV_Handler</a> from port.o(.ramTEXT) referenced from startup_mt7687.o(.ramTEXT)
 <LI><a href="#[1b]">PendSV_Main</a> from startup_mt7687.o(.ramTEXT) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[1e]">Reset_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[10]">SVC_Handler</a> from port.o(.ramTEXT) referenced from startup_mt7687.o(.ramTEXT)
 <LI><a href="#[19]">SvcCall_Main</a> from startup_mt7687.o(.ramTEXT) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[12]">SysTick_Handler</a> from port.o(.ramTEXT) referenced from startup_mt7687.o(.ramTEXT)
 <LI><a href="#[1c]">SysTick_Main</a> from startup_mt7687.o(.ramTEXT) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[7]">SystemInit</a> from system_mt7687.o(i.SystemInit) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[18]">UsageFault_Handler</a> from exception_handler.o(.ramTEXT) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[8]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[c]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[5]">dump_module_buffer</a> from syslog.o(i.dump_module_buffer) referenced 4 times from hal_log.o(.data)
 <LI><a href="#[b]">fputc</a> from sys_init.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[b]">fputc</a> from sys_init.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[d]">hal_uart_receive_callback0</a> from hal_uart.o(i.hal_uart_receive_callback0) referenced from hal_uart.o(.constdata)
 <LI><a href="#[e]">hal_uart_receive_callback1</a> from hal_uart.o(i.hal_uart_receive_callback1) referenced from hal_uart.o(.constdata)
 <LI><a href="#[1d]">isrC_main</a> from hal_nvic.o(.ramTEXT) referenced 96 times from startup_mt7687.o(.isr_vector)
 <LI><a href="#[9]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4]">print_module_log</a> from syslog.o(i.print_module_log) referenced 4 times from hal_log.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>gpt_get_current_time</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config
</UL>

<P><STRONG><a name="[6a]"></a>SF_DAL_FLAG_BUSY_SET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[3e]"></a>SF_DAL_FLAG_BUSY_CLR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
</UL>

<P><STRONG><a name="[3d]"></a>SF_DAL_FLAG_SUS_SET</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
</UL>

<P><STRONG><a name="[44]"></a>SF_DAL_FLAG_SUS_CLR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
</UL>

<P><STRONG><a name="[28]"></a>flash_sfc_config</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_get_current_time
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_pad_config (via Veneer)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_register (via Veneer)
</UL>

<P><STRONG><a name="[2c]"></a>flash_sfc_read</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_read
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_sf_lock (via Veneer)
</UL>

<P><STRONG><a name="[31]"></a>flash_sfc_erase</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_enable (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_disable (via Veneer)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_sf_lock (via Veneer)
</UL>

<P><STRONG><a name="[f]"></a>Flash_ReturnReady</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, flash_sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_suspend_Winbond
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_SET
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> port.o(.ramTEXT)
<LI> startup_mt7687.o(.ramTEXT)
</UL>
<P><STRONG><a name="[40]"></a>SF_DAL_CheckDeviceReady</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_resume_Winbond
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr2
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_CLR
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_suspend_bit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[45]"></a>SF_DAL_CheckReadyAndResume</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, flash_sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_resume_Winbond
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_SUS_CLR
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_CLR
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[3a]"></a>save_and_set_interrupt_mask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nvic.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_all_cache_lines
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_multiple_cache_lines
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_one_cache_line
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_multiple_cache_lines
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_one_cache_line
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_disable (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sf_lock (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock (via Veneer)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex (via Veneer)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock (via Veneer)
</UL>

<P><STRONG><a name="[3f]"></a>restore_interrupt_mask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nvic.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_all_cache_lines
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_multiple_cache_lines
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_one_cache_line
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_multiple_cache_lines
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_one_cache_line
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_disable (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sf_lock (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock (via Veneer)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex (via Veneer)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock (via Veneer)
</UL>

<P><STRONG><a name="[47]"></a>sfc_GPT_return_current_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_get_systime
</UL>

<P><STRONG><a name="[46]"></a>sfc_get_systime</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sfc_get_systime
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_GPT_return_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_time
</UL>

<P><STRONG><a name="[48]"></a>sfc_delay_time</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sfc_delay_time &rArr; sfc_get_systime
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_get_systime
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_ms
</UL>

<P><STRONG><a name="[49]"></a>sfc_delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sfc_delay_ms &rArr; sfc_delay_time &rArr; sfc_get_systime
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_time
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Init
</UL>

<P><STRONG><a name="[62]"></a>sfc_getMaxGPRamSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config
</UL>

<P><STRONG><a name="[4a]"></a>sfc_Init</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[5d]"></a>sfc_GetDirectMode</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device
</UL>

<P><STRONG><a name="[60]"></a>sfc_direct_read_setup</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode
</UL>

<P><STRONG><a name="[4e]"></a>sfc_transfer</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_MacEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_MacWaitReady
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sfc_write
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_security_write_crc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
</UL>

<P><STRONG><a name="[50]"></a>sfc_Command_List</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_suspend_Winbond
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_resume_Winbond
</UL>

<P><STRONG><a name="[13d]"></a>sfc_clear_gpram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sfc.o(.ramTEXT), UNUSED)

<P><STRONG><a name="[52]"></a>sfc_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_manu_id_quad
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_manu_id
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec_id
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr2
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_read
</UL>

<P><STRONG><a name="[53]"></a>sfc_write</STRONG> (Thumb, 88 bytes, Stack size 192 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_sr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[56]"></a>sfc_security_write_crc</STRONG> (Thumb, 50 bytes, Stack size 184 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
</UL>

<P><STRONG><a name="[57]"></a>__sfc_write</STRONG> (Thumb, 92 bytes, Stack size 192 bytes, sfc.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>

<P><STRONG><a name="[3c]"></a>flash_suspend_Winbond</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
</UL>

<P><STRONG><a name="[43]"></a>flash_resume_Winbond</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
</UL>

<P><STRONG><a name="[5c]"></a>flash_read_jedec_id</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device
</UL>

<P><STRONG><a name="[2b]"></a>flash_check_device</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec_id
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_GetDirectMode
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_register (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config
</UL>

<P><STRONG><a name="[5f]"></a>flash_switch_mode</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_direct_read_setup
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_register (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>

<P><STRONG><a name="[61]"></a>flash_config</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec_id
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_getMaxGPRamSize
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_register (via Veneer)
</UL>

<P><STRONG><a name="[63]"></a>flash_init</STRONG> (Thumb, 544 bytes, Stack size 40 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_jedec_id
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_getMaxGPRamSize
</UL>

<P><STRONG><a name="[3b]"></a>flash_read_sr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
</UL>

<P><STRONG><a name="[51]"></a>flash_wait_ready</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_ms
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_fast_read
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[64]"></a>flash_read_manu_id</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
</UL>

<P><STRONG><a name="[65]"></a>flash_read_manu_id_quad</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
</UL>

<P><STRONG><a name="[2e]"></a>flash_read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_read
</UL>

<P><STRONG><a name="[2f]"></a>flash_fast_read</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_read
</UL>

<P><STRONG><a name="[41]"></a>flash_read_sr2</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_flash_read_SR2_comand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
</UL>

<P><STRONG><a name="[35]"></a>flash_unprotect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_sr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
</UL>

<P><STRONG><a name="[68]"></a>flash_protect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_sr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr
</UL>

<P><STRONG><a name="[34]"></a>flash_write_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
</UL>

<P><STRONG><a name="[69]"></a>flash_write_disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_chip
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector_32k
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[39]"></a>flash_erase_sector</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
</UL>

<P><STRONG><a name="[38]"></a>flash_erase_sector_32k</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
</UL>

<P><STRONG><a name="[37]"></a>flash_erase_page</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write_security_crc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
</UL>

<P><STRONG><a name="[6b]"></a>flash_erase_chip</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
</UL>

<P><STRONG><a name="[6c]"></a>flash_erase</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write
</UL>

<P><STRONG><a name="[6d]"></a>flash_write</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_disable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_GetDirectMode
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert (via Veneer)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_FLAG_BUSY_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write
</UL>

<P><STRONG><a name="[6e]"></a>flash_erase_write_security_crc</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_security_write_crc
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_page
</UL>

<P><STRONG><a name="[6f]"></a>flash_erase_write</STRONG> (Thumb, 228 bytes, Stack size 4200 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>

<P><STRONG><a name="[13e]"></a>query_spi_flash_status</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, spi_flash.o(.ramTEXT), UNUSED)

<P><STRONG><a name="[32]"></a>hal_cache_invalidate_all_cache_lines</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hal_cache.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_disable (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase
</UL>

<P><STRONG><a name="[70]"></a>hal_cache_invalidate_one_cache_line</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_cache.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_multiple_cache_lines
</UL>

<P><STRONG><a name="[71]"></a>hal_cache_invalidate_multiple_cache_lines</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hal_cache.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_one_cache_line
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>

<P><STRONG><a name="[72]"></a>hal_cache_flush_one_cache_line</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_cache.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_multiple_cache_lines
</UL>

<P><STRONG><a name="[73]"></a>hal_cache_flush_multiple_cache_lines</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hal_cache.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_flush_one_cache_line
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>

<P><STRONG><a name="[74]"></a>hal_cache_flush_all_cache_lines</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_cache.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask
</UL>

<P><STRONG><a name="[1d]"></a>isrC_main</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hal_nvic.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = isrC_main &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pending_irq (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_irq (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, port.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SVC_Handler &rArr; vPortCurrentTaskStackOverflowCheck &rArr; hal_dwt_request_watchpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_init (via Veneer)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortCurrentTaskStackOverflowCheck (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.ramTEXT)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, port.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext (via Veneer)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortCurrentTaskStackOverflowCheck (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.ramTEXT)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, port.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SysTick_Handler &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.ramTEXT)
</UL>
<P><STRONG><a name="[7c]"></a>CommonFault_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, exception_handler.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HardFault_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MemManage_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BusFault_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UsageFault_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>DebugMon_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exception_handler.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DebugMon_Handler &rArr; CommonFault_Handler &rArr; exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Monitor_Handler (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1f]"></a>exception_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, exception_handler.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = exception_init &rArr; Flash_ReturnReady &rArr; flash_suspend_Winbond &rArr; sfc_Command_List &rArr; flash_wait_ready &rArr; flash_read_sr &rArr; sfc_read &rArr; sfc_transfer &rArr; sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonFault_Handler
</UL>

<P><STRONG><a name="[19]"></a>SvcCall_Main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_mt7687.o(.ramTEXT))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>PendSV_Main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_mt7687.o(.ramTEXT))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>SysTick_Main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_mt7687.o(.ramTEXT))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e]"></a>Reset_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))

<P><STRONG><a name="[8]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[13f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[92]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[140]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[141]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[142]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[143]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[144]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[145]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[146]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[131]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time_in_ms
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[147]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_write (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sfc_write (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_security_write_crc (via Veneer)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_SetFormat
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_baudrate
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
</UL>

<P><STRONG><a name="[136]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[14f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[150]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[152]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[86]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[90]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[153]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[154]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>ADS1115_READ</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, main.o(i.ADS1115_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ADS1115_READ &rArr; hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>Bus_Fault_Handler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, exception_handler.o(i.Bus_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bus_Fault_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler (via Veneer)
</UL>

<P><STRONG><a name="[9a]"></a>CM4_GPT2Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpt.o(i.CM4_GPT2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CM4_GPT2Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
</UL>

<P><STRONG><a name="[9c]"></a>CM4_GPT4Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpt.o(i.CM4_GPT4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
</UL>

<P><STRONG><a name="[6]"></a>CachePreInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, system_mt7687.o(i.CachePreInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[10e]"></a>DMA_Clock_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(i.DMA_Clock_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
</UL>

<P><STRONG><a name="[3]"></a>DMA_ERROR_LISR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dma.o(i.DMA_ERROR_LISR))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>DMA_GetChannel</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dma.o(i.DMA_GetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_GetChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
</UL>

<P><STRONG><a name="[fe]"></a>DMA_Vfifo_disable_interrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dma.o(i.DMA_Vfifo_disable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>

<P><STRONG><a name="[21]"></a>Debug_Monitor_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, exception_handler.o(i.Debug_Monitor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Debug_Monitor_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler (via Veneer)
</UL>

<P><STRONG><a name="[a]"></a>GPT_INT_Handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gpt.o(i.GPT_INT_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPT_INT_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_TMR_INT_status_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpt.o(i.GPT_init)
</UL>
<P><STRONG><a name="[9b]"></a>GPT_init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, gpt.o(i.GPT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_set_priority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT4Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
</UL>

<P><STRONG><a name="[a4]"></a>GPT_return_current_count</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gpt.o(i.GPT_return_current_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_gpt4_count
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_count
</UL>

<P><STRONG><a name="[22]"></a>Hard_Fault_Handler</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, exception_handler.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Hard_Fault_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler (via Veneer)
</UL>

<P><STRONG><a name="[a7]"></a>MPU_READ</STRONG> (Thumb, 782 bytes, Stack size 128 bytes, main.o(i.MPU_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = MPU_READ &rArr; hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>MPU_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.MPU_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = MPU_init &rArr; i2c_send &rArr; hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23]"></a>MemManage_Fault_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, exception_handler.o(i.MemManage_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MemManage_Fault_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler (via Veneer)
</UL>

<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exception_handler.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[12c]"></a>SysTick_Set</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, system_mt7687.o(i.SysTick_Set))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_init
</UL>

<P><STRONG><a name="[af]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_mt7687.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_mcu_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_init
</UL>

<P><STRONG><a name="[7]"></a>SystemInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, system_mt7687.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[24]"></a>Usage_Fault_Handler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, exception_handler.o(i.Usage_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Usage_Fault_Handler &rArr; memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler (via Veneer)
</UL>

<P><STRONG><a name="[b1]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[157]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[54]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode (via Veneer)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sfc_write (via Veneer)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_return_current_count
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_dump_data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUsageErrorMsg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMemoryManagementErrorMsg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBusFaultErrorMsg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryDumpAll
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_init (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Monitor_Handler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[159]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b3]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15a]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[15b]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[15c]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[138]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
</UL>

<P><STRONG><a name="[b4]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15d]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[15e]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[15f]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[13a]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
</UL>

<P><STRONG><a name="[b7]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_assert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, exception_handler.o(i.__aeabi_assert))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_ready (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sf_lock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckReadyAndResume (via Veneer)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReturnReady (via Veneer)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_get_current_time (via Veneer)
</UL>

<P><STRONG><a name="[aa]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
</UL>

<P><STRONG><a name="[a9]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
</UL>

<P><STRONG><a name="[ba]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[b6]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[b8]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[160]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[161]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[162]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[bb]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[139]"></a>buffer_pool_alloc</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, syslog.o(i.buffer_pool_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buffer_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
</UL>

<P><STRONG><a name="[c1]"></a>buffer_pool_release</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, syslog.o(i.buffer_pool_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = buffer_pool_release &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_send
</UL>

<P><STRONG><a name="[a0]"></a>clear_TMR_INT_status_bit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(i.clear_TMR_INT_status_bit))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_INT_Handler
</UL>

<P><STRONG><a name="[67]"></a>customer_flash_read_SR2_comand</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(i.customer_flash_read_SR2_comand), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr2 (via Veneer)
</UL>

<P><STRONG><a name="[2a]"></a>customer_flash_register</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(i.customer_flash_register), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device (via Veneer)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config (via Veneer)
</UL>

<P><STRONG><a name="[42]"></a>customer_flash_suspend_bit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(i.customer_flash_suspend_bit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_DAL_CheckDeviceReady (via Veneer)
</UL>

<P><STRONG><a name="[5a]"></a>customer_switch_spi_mode_command</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(i.customer_switch_spi_mode_command), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode (via Veneer)
</UL>

<P><STRONG><a name="[5b]"></a>customer_switch_spiq_mode_command</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_config.o(i.customer_switch_spiq_mode_command), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_Switch_Device_Mode (via Veneer)
</UL>

<P><STRONG><a name="[c3]"></a>delay_ms</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timer.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = delay_ms &rArr; delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
</UL>

<P><STRONG><a name="[c4]"></a>delay_time</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(i.delay_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[5]"></a>dump_module_buffer</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, syslog.o(i.dump_module_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dump_module_buffer &rArr; vdump_module_buffer &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hal_log.o(.data)
<LI> syslog.o(.data)
</UL>
<P><STRONG><a name="[12b]"></a>exception_reboot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exception_handler.o(i.exception_reboot))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[b9]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[b]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sys_init.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; hal_uart_put_char
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_put_char
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[c8]"></a>free_sf_lock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, flash_sfc.o(i.free_sf_lock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_sf_lock
</UL>

<P><STRONG><a name="[c5]"></a>get_current_count</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.get_current_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_return_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time
</UL>

<P><STRONG><a name="[c9]"></a>get_current_gpt4_count</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.get_current_gpt4_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_current_gpt4_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_return_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
</UL>

<P><STRONG><a name="[cb]"></a>get_sf_lock</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, flash_sfc.o(i.get_sf_lock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retrieve_sf_lock
</UL>

<P><STRONG><a name="[cc]"></a>gpio_direction</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, low_hal_gpio.o(i.gpio_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_direction &rArr; halGPIO_ConfDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGPIO_ConfDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_direction
</UL>

<P><STRONG><a name="[ce]"></a>gpio_get_status</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, low_hal_gpio.o(i.gpio_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_get_status &rArr; halgetGPIO_OutEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halgetGPIO_OutEnable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halgetGPIO_DOUT
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halgetGPIO_DIN
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_get_input
</UL>

<P><STRONG><a name="[cd]"></a>halGPIO_ConfDirection</STRONG> (Thumb, 456 bytes, Stack size 12 bytes, hal_gpio_7687.o(i.halGPIO_ConfDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = halGPIO_ConfDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPinmuxTopOnPadFunc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction
</UL>

<P><STRONG><a name="[d2]"></a>halI2CChkStatus</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, hal_i2c.o(i.halI2CChkStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = halI2CChkStatus &rArr; halI2CGetFIFOStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetFIFOStatus
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
</UL>

<P><STRONG><a name="[d5]"></a>halI2CClearFIFO</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hal_i2c.o(i.halI2CClearFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halI2CClearFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBusyStatus
</UL>

<P><STRONG><a name="[d3]"></a>halI2CGetBaseAddr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_i2c.o(i.halI2CGetBaseAddr))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CMasterCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetFIFOStatus
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBusyStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CClearFIFO
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CChkStatus
</UL>

<P><STRONG><a name="[d6]"></a>halI2CGetBusyStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_i2c.o(i.halI2CGetBusyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = halI2CGetBusyStatus &rArr; halI2CClearFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CClearFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
</UL>

<P><STRONG><a name="[df]"></a>halI2CGetFIFOSpace</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, hal_i2c.o(i.halI2CGetFIFOSpace))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CTxFIFOSpace
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CRxFIFOSpace
</UL>

<P><STRONG><a name="[d4]"></a>halI2CGetFIFOStatus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_i2c.o(i.halI2CGetFIFOStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halI2CGetFIFOStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CChkStatus
</UL>

<P><STRONG><a name="[d7]"></a>halI2CInit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, hal_i2c.o(i.halI2CInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = halI2CInit &rArr; halI2CClearFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CClearFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_configure
</UL>

<P><STRONG><a name="[d8]"></a>halI2CMasterCtrl</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, hal_i2c.o(i.halI2CMasterCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = halI2CMasterCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_freq_get
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_configure
</UL>

<P><STRONG><a name="[da]"></a>halI2CNormalRead</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, hal_i2c.o(i.halI2CNormalRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = halI2CNormalRead &rArr; i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CRxFIFOSpace
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CChkStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_via_mcu
</UL>

<P><STRONG><a name="[dd]"></a>halI2CNormalWrite</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, hal_i2c.o(i.halI2CNormalWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CTxFIFOSpace
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CChkStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_via_mcu
</UL>

<P><STRONG><a name="[db]"></a>halI2CRxFIFOSpace</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, hal_i2c.o(i.halI2CRxFIFOSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = halI2CRxFIFOSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetFIFOSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
</UL>

<P><STRONG><a name="[de]"></a>halI2CTxFIFOSpace</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, hal_i2c.o(i.halI2CTxFIFOSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = halI2CTxFIFOSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetFIFOSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
</UL>

<P><STRONG><a name="[e0]"></a>halPinmuxTopOnPadFunc</STRONG> (Thumb, 730 bytes, Stack size 16 bytes, hal_pinmux.o(i.halPinmuxTopOnPadFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = halPinmuxTopOnPadFunc &rArr; halGPIO_ConfDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGPIO_ConfDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_config
</UL>

<P><STRONG><a name="[fc]"></a>halUART_Get_VFIFO_Length</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart.o(i.halUART_Get_VFIFO_Length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halUART_Get_VFIFO_Length
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>

<P><STRONG><a name="[e1]"></a>halUART_HWInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart.o(i.halUART_HWInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = halUART_HWInit &rArr; halUART_SetFormat &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_SetFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[e2]"></a>halUART_SetFormat</STRONG> (Thumb, 252 bytes, Stack size 112 bytes, uart.o(i.halUART_SetFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = halUART_SetFormat &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_freq_get
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_HWInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
</UL>

<P><STRONG><a name="[33]"></a>hal_cache_disable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_cache.o(i.hal_cache_disable), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_invalidate_all_cache_lines (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
</UL>

<P><STRONG><a name="[36]"></a>hal_cache_enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal_cache.o(i.hal_cache_enable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
</UL>

<P><STRONG><a name="[78]"></a>hal_dwt_init</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, hal_dwt.o(i.hal_dwt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hal_dwt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via Veneer)
</UL>

<P><STRONG><a name="[12f]"></a>hal_dwt_request_watchpoint</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hal_dwt.o(i.hal_dwt_request_watchpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_dwt_request_watchpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortCurrentTaskStackOverflowCheck
</UL>

<P><STRONG><a name="[e4]"></a>hal_dwt_reset</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hal_dwt.o(i.hal_dwt_reset))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_init
</UL>

<P><STRONG><a name="[e5]"></a>hal_gpio_get_input</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, hal_gpio.o(i.hal_gpio_get_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_gpio_get_input &rArr; gpio_get_status &rArr; halgetGPIO_OutEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>hal_gpio_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_gpio.o(i.hal_gpio_init))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>hal_gpio_set_direction</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hal_gpio.o(i.hal_gpio_set_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hal_gpio_set_direction &rArr; gpio_direction &rArr; halGPIO_ConfDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>hal_gpt_delay_ms</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_gpt.o(i.hal_gpt_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hal_gpt_delay_ms &rArr; delay_ms &rArr; delay_time &rArr; get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1115_READ
</UL>

<P><STRONG><a name="[10f]"></a>hal_gpt_get_duration_count</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hal_gpt.o(i.hal_gpt_get_duration_count))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish
</UL>

<P><STRONG><a name="[26]"></a>hal_gpt_get_free_run_count</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, hal_gpt.o(i.hal_gpt_get_free_run_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = hal_gpt_get_free_run_count &rArr;  log_hal_error_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_mcu_freq_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_gpt4_count
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_count
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT4Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_get_current_time (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time_in_ms
</UL>

<P><STRONG><a name="[e7]"></a>hal_i2c_master_init</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, hal_i2c_master.o(i.hal_i2c_master_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = hal_i2c_master_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_configure
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_translate_port
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_is_port_valid
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_is_frequency_valid
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>hal_i2c_master_receive_polling</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, hal_i2c_master.o(i.hal_i2c_master_receive_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = hal_i2c_master_receive_polling &rArr; i2c_read_via_mcu &rArr; halI2CNormalRead &rArr; i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBusyStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_via_mcu
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_translate_port
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_is_port_valid
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_index_irq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1115_READ
</UL>

<P><STRONG><a name="[94]"></a>hal_i2c_master_send_polling</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, hal_i2c_master.o(i.hal_i2c_master_send_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBusyStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_via_mcu
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_translate_port
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_is_port_valid
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_index_irq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1115_READ
</UL>

<P><STRONG><a name="[f0]"></a>hal_nvic_disable_irq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_nvic.o(i.hal_nvic_disable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_nvic_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
</UL>

<P><STRONG><a name="[a3]"></a>hal_nvic_enable_irq</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, hal_nvic.o(i.hal_nvic_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>

<P><STRONG><a name="[a1]"></a>hal_nvic_register_isr_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_nvic.o(i.hal_nvic_register_isr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>

<P><STRONG><a name="[a2]"></a>hal_nvic_set_priority</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, hal_nvic.o(i.hal_nvic_set_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_nvic_set_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>

<P><STRONG><a name="[f5]"></a>hal_pinmux_set_function</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_gpio.o(i.hal_pinmux_set_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hal_pinmux_set_function &rArr; pinmux_config &rArr; halPinmuxTopOnPadFunc &rArr; halGPIO_ConfDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plain_log_uart_init
</UL>

<P><STRONG><a name="[ee]"></a>hal_sleep_manager_lock_sleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_sleep_manager.o(i.hal_sleep_manager_lock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_sleep_manager_lock_sleep &rArr; sleepdrv_hold_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
</UL>

<P><STRONG><a name="[ed]"></a>hal_sleep_manager_set_sleep_handle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_sleep_manager.o(i.hal_sleep_manager_set_sleep_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[f2]"></a>hal_sleep_manager_unlock_sleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_sleep_manager.o(i.hal_sleep_manager_unlock_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_sleep_manager_unlock_sleep &rArr; sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
</UL>

<P><STRONG><a name="[ff]"></a>hal_uart_get_available_receive_bytes</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hal_uart.o(i.hal_uart_get_available_receive_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_uart_get_available_receive_bytes &rArr; halUART_Get_VFIFO_Length
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Get_VFIFO_Length
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_is_port_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback1
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback0
</UL>

<P><STRONG><a name="[102]"></a>hal_uart_init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, hal_uart.o(i.hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = hal_uart_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_sleep_mode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset_default_value
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_HWInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_is_config_valid
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plain_log_uart_init
</UL>

<P><STRONG><a name="[c7]"></a>hal_uart_put_char</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_uart.o(i.hal_uart_put_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_uart_put_char
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_output_char
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[106]"></a>hal_uart_set_format</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, hal_uart.o(i.hal_uart_set_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hal_uart_set_format &rArr; halUART_SetFormat &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_SetFormat
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_word_length
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_stopbit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_parity
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_baudrate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_is_config_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[d0]"></a>halgetGPIO_DIN</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_gpio_7687.o(i.halgetGPIO_DIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halgetGPIO_DIN
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_status
</UL>

<P><STRONG><a name="[d1]"></a>halgetGPIO_DOUT</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_gpio_7687.o(i.halgetGPIO_DOUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halgetGPIO_DOUT
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_status
</UL>

<P><STRONG><a name="[cf]"></a>halgetGPIO_OutEnable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_gpio_7687.o(i.halgetGPIO_OutEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halgetGPIO_OutEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_status
</UL>

<P><STRONG><a name="[10d]"></a>hex_dump_data</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, syslog.o(i.hex_dump_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hex_dump_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
</UL>

<P><STRONG><a name="[eb]"></a>i2c_configure</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, i2c.o(i.i2c_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = i2c_configure &rArr; halI2CInit &rArr; halI2CClearFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CMasterCtrl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
</UL>

<P><STRONG><a name="[ec]"></a>i2c_enable</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, i2c.o(i.i2c_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_enable &rArr; DMA_GetChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannel
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
</UL>

<P><STRONG><a name="[f1]"></a>i2c_read_via_mcu</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, i2c.o(i.i2c_read_via_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = i2c_read_via_mcu &rArr; halI2CNormalRead &rArr; i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
</UL>

<P><STRONG><a name="[ac]"></a>i2c_send</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, main.o(i.i2c_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = i2c_send &rArr; hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_init
</UL>

<P><STRONG><a name="[f3]"></a>i2c_write_via_mcu</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, i2c.o(i.i2c_write_via_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
</UL>

<P><STRONG><a name="[76]"></a>log_hal_error_internal</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, hal_log.o(i.log_hal_error_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_via_mcu
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_via_mcu
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
</UL>

<P><STRONG><a name="[5e]"></a>log_hal_info_internal</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, hal_log.o(i.log_hal_info_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init (via Veneer)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_config (via Veneer)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_sr2 (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_device (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
</UL>

<P><STRONG><a name="[111]"></a>log_queue_send</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, syslog.o(i.log_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_pool_release
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
</UL>

<P><STRONG><a name="[9]"></a>main</STRONG> (Thumb, 406 bytes, Stack size 152 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = main &rArr; MPU_READ &rArr; hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_direction
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pinmux_set_function
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_get_input
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1115_READ
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_raw_to_voltage
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[99]"></a>memoryDumpAll</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, exception_handler.o(i.memoryDumpAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = memoryDumpAll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Monitor_Handler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[f6]"></a>pinmux_config</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, pinmux.o(i.pinmux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pinmux_config &rArr; halPinmuxTopOnPadFunc &rArr; halGPIO_ConfDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPinmuxTopOnPadFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pinmux_set_function
</UL>

<P><STRONG><a name="[b5]"></a>platform_assert</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, exception_handler.o(i.platform_assert))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[97]"></a>printBusFaultErrorMsg</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, exception_handler.o(i.printBusFaultErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = printBusFaultErrorMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[a6]"></a>printMemoryManagementErrorMsg</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, exception_handler.o(i.printMemoryManagementErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = printMemoryManagementErrorMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[a5]"></a>printUsageErrorMsg</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, exception_handler.o(i.printUsageErrorMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = printUsageErrorMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[4]"></a>print_module_log</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, syslog.o(i.print_module_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = print_module_log &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hal_log.o(.data)
<LI> syslog.o(.data)
</UL>
<P><STRONG><a name="[122]"></a>pvPortMalloc</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
</UL>

<P><STRONG><a name="[30]"></a>release_sf_lock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_sfc.o(i.release_sf_lock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_sf_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_read (via Veneer)
</UL>

<P><STRONG><a name="[2d]"></a>retrieve_sf_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash_sfc.o(i.retrieve_sf_lock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sf_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_erase (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_read (via Veneer)
</UL>

<P><STRONG><a name="[f9]"></a>sleepdrv_get_handle</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_sleep_driver.o(i.sleepdrv_get_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_set_sleep_handle
</UL>

<P><STRONG><a name="[127]"></a>sleepdrv_get_mutex</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_sleep_driver.o(i.sleepdrv_get_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sleepdrv_get_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
</UL>

<P><STRONG><a name="[f7]"></a>sleepdrv_hold_sleep_lock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_sleep_driver.o(i.sleepdrv_hold_sleep_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sleepdrv_hold_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_lock_sleep
</UL>

<P><STRONG><a name="[129]"></a>sleepdrv_is_handle_valid</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_sleep_driver.o(i.sleepdrv_is_handle_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_mutex
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_release_sleep_lock
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_hold_sleep_lock
</UL>

<P><STRONG><a name="[128]"></a>sleepdrv_release_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_sleep_driver.o(i.sleepdrv_release_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_get_handle
</UL>

<P><STRONG><a name="[fa]"></a>sleepdrv_release_sleep_lock</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hal_sleep_driver.o(i.sleepdrv_release_sleep_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sleepdrv_release_sleep_lock &rArr; sleepdrv_is_handle_valid &rArr; sleepdrv_release_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepdrv_is_handle_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep_manager_unlock_sleep
</UL>

<P><STRONG><a name="[98]"></a>stackDump</STRONG> (Thumb, 844 bytes, Stack size 8 bytes, exception_handler.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_reboot
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_check
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usage_Fault_Handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Fault_Handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Monitor_Handler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Fault_Handler
</UL>

<P><STRONG><a name="[b0]"></a>top_mcu_freq_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, top.o(i.top_mcu_freq_get))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
</UL>

<P><STRONG><a name="[d9]"></a>top_xtal_freq_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, top.o(i.top_xtal_freq_get))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CMasterCtrl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_SetFormat
</UL>

<P><STRONG><a name="[ae]"></a>top_xtal_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, top.o(i.top_xtal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = top_xtal_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[108]"></a>uart_output_char</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(i.uart_output_char))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_put_char
</UL>

<P><STRONG><a name="[105]"></a>uart_reset_default_value</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, uart.o(i.uart_reset_default_value))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[107]"></a>uart_set_sleep_mode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.uart_set_sleep_mode))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[133]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[12e]"></a>uxTaskGetBottomOfStack</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetBottomOfStack))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortCurrentTaskStackOverflowCheck
</UL>

<P><STRONG><a name="[12d]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, os_port_callback.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[119]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[134]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[79]"></a>vPortCurrentTaskStackOverflowCheck</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, port.o(i.vPortCurrentTaskStackOverflowCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortCurrentTaskStackOverflowCheck &rArr; hal_dwt_request_watchpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_dwt_request_watchpoint
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetBottomOfStack
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler (via Veneer)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via Veneer)
</UL>

<P><STRONG><a name="[11d]"></a>vPortEnterCritical</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[11e]"></a>vPortExitCritical</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[c2]"></a>vPortFree</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_pool_release
</UL>

<P><STRONG><a name="[130]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[121]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[132]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[135]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[123]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[7a]"></a>vTaskSwitchContext</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler (via Veneer)
</UL>

<P><STRONG><a name="[c6]"></a>vdump_module_buffer</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, syslog.o(i.vdump_module_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vdump_module_buffer &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_send
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_dump_data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_pool_alloc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time_in_ms
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_module_buffer
</UL>

<P><STRONG><a name="[110]"></a>vprint_module_log</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, syslog.o(i.vprint_module_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_send
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_pool_alloc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time_in_ms
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_info_internal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_module_log
</UL>

<P><STRONG><a name="[113]"></a>xQueueGenericSend</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_send
</UL>

<P><STRONG><a name="[112]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_queue_send
</UL>

<P><STRONG><a name="[13b]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[137]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[7b]"></a>xTaskIncrementTick</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler (via Veneer)
</UL>

<P><STRONG><a name="[11b]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[120]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[126]"></a>xTaskResumeAll</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_assert
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9e]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannel
</UL>

<P><STRONG><a name="[9f]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannel
</UL>

<P><STRONG><a name="[29]"></a>sfc_pad_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, flash_sfc.o(i.sfc_pad_config), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sfc_config (via Veneer)
</UL>

<P><STRONG><a name="[dc]"></a>i2c_master_wait_transaction_finish</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, hal_i2c.o(i.i2c_master_wait_transaction_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = i2c_master_wait_transaction_finish &rArr; log_hal_error_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_duration_count
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
</UL>

<P><STRONG><a name="[4d]"></a>sfc_MacLeave</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_MacWaitReady
</UL>

<P><STRONG><a name="[4c]"></a>sfc_MacTrigger</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_MacWaitReady
</UL>

<P><STRONG><a name="[4b]"></a>sfc_MacWaitReady</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sfc.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfc_MacWaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_MacTrigger
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_MacLeave
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
</UL>

<P><STRONG><a name="[4f]"></a>sfc_MacEnable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sfc.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_transfer
</UL>

<P><STRONG><a name="[58]"></a>flash_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[59]"></a>flash_Switch_Device_Mode</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_Command_List
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_switch_spiq_mode_command (via Veneer)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_switch_spi_mode_command (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_switch_mode
</UL>

<P><STRONG><a name="[66]"></a>flash_write_sr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spi_flash.o(.ramTEXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_protect
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unprotect
</UL>

<P><STRONG><a name="[f4]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_nvic.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
</UL>

<P><STRONG><a name="[75]"></a>get_current_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_nvic.o(i.get_current_irq))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main (via Veneer)
</UL>

<P><STRONG><a name="[77]"></a>get_pending_irq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_nvic.o(i.get_pending_irq))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main (via Veneer)
</UL>

<P><STRONG><a name="[ef]"></a>hal_i2c_index_irq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_i2c_master.o(i.hal_i2c_index_irq))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
</UL>

<P><STRONG><a name="[e9]"></a>hal_i2c_is_frequency_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_i2c_master.o(i.hal_i2c_is_frequency_valid))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
</UL>

<P><STRONG><a name="[e8]"></a>hal_i2c_is_port_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_i2c_master.o(i.hal_i2c_is_port_valid))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
</UL>

<P><STRONG><a name="[ea]"></a>hal_i2c_translate_port</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_i2c_master.o(i.hal_i2c_translate_port))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
</UL>

<P><STRONG><a name="[fb]"></a>hal_uart_check_irq_disable</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, hal_uart.o(i.hal_uart_check_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_uart_check_irq_disable &rArr; halUART_Get_VFIFO_Length
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Get_VFIFO_Length
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_disable_interrupt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_channel_to_dma_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback1
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback0
</UL>

<P><STRONG><a name="[103]"></a>hal_uart_is_config_valid</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hal_uart.o(i.hal_uart_is_config_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_uart_is_config_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_is_port_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[100]"></a>hal_uart_is_port_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_uart.o(i.hal_uart_is_port_valid))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_is_config_valid
</UL>

<P><STRONG><a name="[d]"></a>hal_uart_receive_callback0</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hal_uart.o(i.hal_uart_receive_callback0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_uart_receive_callback0 &rArr; hal_uart_check_irq_disable &rArr; halUART_Get_VFIFO_Length
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(.constdata)
</UL>
<P><STRONG><a name="[e]"></a>hal_uart_receive_callback1</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_uart.o(i.hal_uart_receive_callback1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_uart_receive_callback1 &rArr; hal_uart_check_irq_disable &rArr; halUART_Get_VFIFO_Length
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>hal_uart_translate_baudrate</STRONG> (Thumb, 26 bytes, Stack size 64 bytes, hal_uart.o(i.hal_uart_translate_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_uart_translate_baudrate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
</UL>

<P><STRONG><a name="[10a]"></a>hal_uart_translate_parity</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hal_uart.o(i.hal_uart_translate_parity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_uart_translate_parity
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
</UL>

<P><STRONG><a name="[101]"></a>hal_uart_translate_port</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_uart.o(i.hal_uart_translate_port))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback1
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback0
</UL>

<P><STRONG><a name="[109]"></a>hal_uart_translate_stopbit</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, hal_uart.o(i.hal_uart_translate_stopbit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_uart_translate_stopbit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
</UL>

<P><STRONG><a name="[10b]"></a>hal_uart_translate_word_length</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, hal_uart.o(i.hal_uart_translate_word_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_uart_translate_word_length
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
</UL>

<P><STRONG><a name="[fd]"></a>uart_channel_to_dma_channel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_uart.o(i.uart_channel_to_dma_channel))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>

<P><STRONG><a name="[118]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[13c]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[11a]"></a>prvCopyDataToQueue</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[11c]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[11f]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[124]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[125]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[12a]"></a>reboot_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, exception_handler.o(i.reboot_check))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[ca]"></a>get_current_time_in_ms</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, syslog.o(i.get_current_time_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_current_time_in_ms &rArr; hal_gpt_get_free_run_count &rArr;  log_hal_error_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprint_module_log
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdump_module_buffer
</UL>

<P><STRONG><a name="[ad]"></a>SystemClock_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemClock_Config &rArr; top_xtal_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>adc_raw_to_voltage</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.adc_raw_to_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>plain_log_uart_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.plain_log_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = plain_log_uart_init &rArr; hal_uart_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pinmux_set_function
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupHardware
</UL>

<P><STRONG><a name="[114]"></a>prvSetupHardware</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.prvSetupHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvSetupHardware &rArr; plain_log_uart_init &rArr; hal_uart_init &rArr; hal_sleep_manager_set_sleep_handle &rArr; sleepdrv_get_handle &rArr; log_hal_info_internal &rArr; vprint_module_log &rArr; log_queue_send &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plain_log_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b2]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[bf]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[be]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
