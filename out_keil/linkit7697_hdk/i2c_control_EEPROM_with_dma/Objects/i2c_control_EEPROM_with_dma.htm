<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\..\..\..\out_keil\linkit7697_hdk\i2c_control_EEPROM_with_dma\Objects\i2c_control_EEPROM_with_dma.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\..\..\..\out_keil\linkit7697_hdk\i2c_control_EEPROM_with_dma\Objects\i2c_control_EEPROM_with_dma.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Thu Jun 13 15:31:50 2019
<BR><P>
<H3>Maximum Stack Usage =        360 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MPU_READ &rArr; hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[11]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PendSV_Handler</a><BR>
 <LI><a href="#[12]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SysTick_Handler</a><BR>
 <LI><a href="#[14]">DMA_ERROR_LISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DMA_ERROR_LISR</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">BusFault_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[1]">CachePreInit</a> from system_mt7687.o(i.CachePreInit) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[14]">DMA_ERROR_LISR</a> from dma.o(i.DMA_ERROR_LISR) referenced 3 times from dma.o(.data)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[5]">GPT_INT_Handler</a> from gpt.o(i.GPT_INT_Handler) referenced from gpt.o(i.GPT_init)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[a]">NMI_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[11]">PendSV_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[15]">Reset_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[f]">SVC_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[12]">SysTick_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[2]">SystemInit</a> from system_mt7687.o(i.SystemInit) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_mt7687.o(.reset_handler) referenced from startup_mt7687.o(.isr_vector)
 <LI><a href="#[3]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mt7687.o(.reset_handler)
 <LI><a href="#[6]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[6]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[7]">hal_uart_receive_callback0</a> from hal_uart.o(i.hal_uart_receive_callback0) referenced from hal_uart.o(.constdata)
 <LI><a href="#[8]">hal_uart_receive_callback1</a> from hal_uart.o(i.hal_uart_receive_callback1) referenced from hal_uart.o(.constdata)
 <LI><a href="#[13]">isrC_main</a> from hal_nvic.o(.ramTEXT) referenced 96 times from startup_mt7687.o(.isr_vector)
 <LI><a href="#[4]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[71]"></a>save_and_set_interrupt_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nvic.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish (via Veneer)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init (via Veneer)
</UL>

<P><STRONG><a name="[72]"></a>restore_interrupt_mask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nvic.o(.ramTEXT))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_restore_interrupt_mask (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish (via Veneer)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init (via Veneer)
</UL>

<P><STRONG><a name="[13]"></a>isrC_main</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hal_nvic.o(.ramTEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrC_main &rArr; log_hal_error_internal &rArr; hal_nvic_save_and_set_interrupt_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))

<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mt7687.o(.reset_handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.isr_vector)
</UL>
<P><STRONG><a name="[3]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[93]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[17]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[94]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[95]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[96]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[97]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[98]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[99]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_SetFormat
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
</UL>

<P><STRONG><a name="[1e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
</UL>

<P><STRONG><a name="[20]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
</UL>

<P><STRONG><a name="[21]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[a0]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[1d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2a]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[a2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[a3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a4]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>ADS1115_READ</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(i.ADS1115_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ADS1115_READ &rArr; hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>CM4_GPT2Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpt.o(i.CM4_GPT2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CM4_GPT2Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
</UL>

<P><STRONG><a name="[32]"></a>CM4_GPT4Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpt.o(i.CM4_GPT4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
</UL>

<P><STRONG><a name="[1]"></a>CachePreInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, system_mt7687.o(i.CachePreInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[8c]"></a>DMA_Clock_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(i.DMA_Clock_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
</UL>

<P><STRONG><a name="[14]"></a>DMA_ERROR_LISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i.DMA_ERROR_LISR))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERROR_LISR
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ERROR_LISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>DMA_GetChannel</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, dma.o(i.DMA_GetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_GetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
</UL>

<P><STRONG><a name="[82]"></a>DMA_Vfifo_disable_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i.DMA_Vfifo_disable_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>

<P><STRONG><a name="[5]"></a>GPT_INT_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpt.o(i.GPT_INT_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPT_INT_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_TMR_INT_status_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpt.o(i.GPT_init)
</UL>
<P><STRONG><a name="[31]"></a>GPT_init</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gpt.o(i.GPT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_set_priority
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT4Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
</UL>

<P><STRONG><a name="[38]"></a>GPT_return_current_count</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpt.o(i.GPT_return_current_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_gpt4_count
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_count
</UL>

<P><STRONG><a name="[39]"></a>MPU_READ</STRONG> (Thumb, 488 bytes, Stack size 64 bytes, main.o(i.MPU_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MPU_READ &rArr; hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>MPU_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(i.MPU_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MPU_init &rArr; i2c_send &rArr; hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>SysTick_Set</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, system_mt7687.o(i.SysTick_Set))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_init
</UL>

<P><STRONG><a name="[40]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_mt7687.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_mcu_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_init
</UL>

<P><STRONG><a name="[2]"></a>SystemInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_mt7687.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mt7687.o(.reset_handler)
</UL>
<P><STRONG><a name="[42]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a5]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[34]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_return_current_count
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[a7]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[44]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a8]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[a9]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[aa]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[8e]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
</UL>

<P><STRONG><a name="[46]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3c]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
</UL>

<P><STRONG><a name="[3b]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
</UL>

<P><STRONG><a name="[49]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[45]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[47]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[ab]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ac]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ad]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4a]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[91]"></a>adc_raw_to_voltage</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.adc_raw_to_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>clear_TMR_INT_status_bit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.clear_TMR_INT_status_bit))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_INT_Handler
</UL>

<P><STRONG><a name="[6e]"></a>delay_ms</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, timer.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
</UL>

<P><STRONG><a name="[50]"></a>delay_time</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(i.delay_time), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_count
</UL>

<P><STRONG><a name="[48]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[6]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_put_char
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[51]"></a>get_current_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.get_current_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_current_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_return_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_time
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
</UL>

<P><STRONG><a name="[53]"></a>get_current_gpt4_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.get_current_gpt4_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_current_gpt4_count &rArr; GPT_return_current_count &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_return_current_count
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
</UL>

<P><STRONG><a name="[54]"></a>gpio_direction</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, low_hal_gpio.o(i.gpio_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_direction &rArr; halGPIO_ConfDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGPIO_ConfDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_direction
</UL>

<P><STRONG><a name="[56]"></a>gpio_get_status</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, low_hal_gpio.o(i.gpio_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halgetGPIO_OutEnable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halgetGPIO_DOUT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halgetGPIO_DIN
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_get_input
</UL>

<P><STRONG><a name="[55]"></a>halGPIO_ConfDirection</STRONG> (Thumb, 324 bytes, Stack size 20 bytes, hal_gpio_7687.o(i.halGPIO_ConfDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = halGPIO_ConfDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPinmuxTopOnPadFunc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction
</UL>

<P><STRONG><a name="[5a]"></a>halI2CChkStatus</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, hal_i2c.o(i.halI2CChkStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halI2CChkStatus &rArr; halI2CGetFIFOStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetFIFOStatus
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
</UL>

<P><STRONG><a name="[5d]"></a>halI2CClearFIFO</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, hal_i2c.o(i.halI2CClearFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = halI2CClearFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBusyStatus
</UL>

<P><STRONG><a name="[5b]"></a>halI2CGetBaseAddr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_i2c.o(i.halI2CGetBaseAddr))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CMasterCtrl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetFIFOStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CClearFIFO
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CChkStatus
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBusyStatus
</UL>

<P><STRONG><a name="[5e]"></a>halI2CGetBusyStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_i2c.o(i.halI2CGetBusyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = halI2CGetBusyStatus &rArr; halI2CClearFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CClearFIFO
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
</UL>

<P><STRONG><a name="[67]"></a>halI2CGetFIFOSpace</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hal_i2c.o(i.halI2CGetFIFOSpace))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CTxFIFOSpace
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CRxFIFOSpace
</UL>

<P><STRONG><a name="[5c]"></a>halI2CGetFIFOStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_i2c.o(i.halI2CGetFIFOStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = halI2CGetFIFOStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CChkStatus
</UL>

<P><STRONG><a name="[5f]"></a>halI2CInit</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, hal_i2c.o(i.halI2CInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = halI2CInit &rArr; halI2CClearFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CClearFIFO
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_configure
</UL>

<P><STRONG><a name="[60]"></a>halI2CMasterCtrl</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, hal_i2c.o(i.halI2CMasterCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = halI2CMasterCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_configure
</UL>

<P><STRONG><a name="[62]"></a>halI2CNormalRead</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, hal_i2c.o(i.halI2CNormalRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = halI2CNormalRead &rArr; i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CRxFIFOSpace
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CChkStatus
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_via_mcu
</UL>

<P><STRONG><a name="[65]"></a>halI2CNormalWrite</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, hal_i2c.o(i.halI2CNormalWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CTxFIFOSpace
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CChkStatus
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_via_mcu
</UL>

<P><STRONG><a name="[63]"></a>halI2CRxFIFOSpace</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_i2c.o(i.halI2CRxFIFOSpace))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetFIFOSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
</UL>

<P><STRONG><a name="[66]"></a>halI2CTxFIFOSpace</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_i2c.o(i.halI2CTxFIFOSpace))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetFIFOSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
</UL>

<P><STRONG><a name="[68]"></a>halPinmuxTopOnPadFunc</STRONG> (Thumb, 500 bytes, Stack size 8 bytes, hal_pinmux.o(i.halPinmuxTopOnPadFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = halPinmuxTopOnPadFunc &rArr; halGPIO_ConfDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGPIO_ConfDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_config
</UL>

<P><STRONG><a name="[80]"></a>halUART_Get_VFIFO_Length</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart.o(i.halUART_Get_VFIFO_Length))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>

<P><STRONG><a name="[69]"></a>halUART_HWInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart.o(i.halUART_HWInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = halUART_HWInit &rArr; halUART_SetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_SetFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[6a]"></a>halUART_SetFormat</STRONG> (Thumb, 214 bytes, Stack size 88 bytes, uart.o(i.halUART_SetFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = halUART_SetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_HWInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
</UL>

<P><STRONG><a name="[6c]"></a>hal_gpio_get_input</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hal_gpio.o(i.hal_gpio_get_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_gpio_get_input &rArr; gpio_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>hal_gpio_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(i.hal_gpio_init))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>hal_gpio_set_direction</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_gpio.o(i.hal_gpio_set_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_gpio_set_direction &rArr; gpio_direction &rArr; halGPIO_ConfDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>hal_gpt_delay_ms</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hal_gpt.o(i.hal_gpt_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_gpt_delay_ms &rArr; CM4_GPT2Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_init
</UL>

<P><STRONG><a name="[8d]"></a>hal_gpt_get_duration_count</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_gpt.o(i.hal_gpt_get_duration_count))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish
</UL>

<P><STRONG><a name="[6f]"></a>hal_gpt_get_free_run_count</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, hal_gpt.o(i.hal_gpt_get_free_run_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_gpt4_count
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_count
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT4Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM4_GPT2Init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_mcu_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish
</UL>

<P><STRONG><a name="[70]"></a>hal_i2c_master_init</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, hal_i2c_master.o(i.hal_i2c_master_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hal_i2c_master_init &rArr; i2c_configure &rArr; halI2CInit &rArr; halI2CClearFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_configure
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_translate_port
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>hal_i2c_master_receive_polling</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, hal_i2c_master.o(i.hal_i2c_master_receive_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hal_i2c_master_receive_polling &rArr; i2c_read_via_mcu &rArr; halI2CNormalRead &rArr; i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_via_mcu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_disable_irq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBusyStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_translate_port
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_index_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1115_READ
</UL>

<P><STRONG><a name="[2e]"></a>hal_i2c_master_send_polling</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, hal_i2c_master.o(i.hal_i2c_master_send_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_via_mcu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_disable_irq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CGetBusyStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_translate_port
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_index_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1115_READ
</UL>

<P><STRONG><a name="[77]"></a>hal_nvic_disable_irq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_nvic.o(i.hal_nvic_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
</UL>

<P><STRONG><a name="[37]"></a>hal_nvic_enable_irq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_nvic.o(i.hal_nvic_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>

<P><STRONG><a name="[35]"></a>hal_nvic_register_isr_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_nvic.o(i.hal_nvic_register_isr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_nvic_register_isr_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>

<P><STRONG><a name="[7b]"></a>hal_nvic_restore_interrupt_mask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_nvic.o(i.hal_nvic_restore_interrupt_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_nvic_restore_interrupt_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
</UL>

<P><STRONG><a name="[7c]"></a>hal_nvic_save_and_set_interrupt_mask</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_nvic.o(i.hal_nvic_save_and_set_interrupt_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_nvic_save_and_set_interrupt_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
</UL>

<P><STRONG><a name="[36]"></a>hal_nvic_set_priority</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hal_nvic.o(i.hal_nvic_set_priority))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT_init
</UL>

<P><STRONG><a name="[7d]"></a>hal_pinmux_set_function</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_gpio.o(i.hal_pinmux_set_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_pinmux_set_function &rArr; pinmux_config &rArr; halPinmuxTopOnPadFunc &rArr; halGPIO_ConfDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>hal_uart_get_available_receive_bytes</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_uart.o(i.hal_uart_get_available_receive_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_uart_get_available_receive_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Get_VFIFO_Length
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback1
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback0
</UL>

<P><STRONG><a name="[85]"></a>hal_uart_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hal_uart.o(i.hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hal_uart_init &rArr; hal_uart_set_format &rArr; halUART_SetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reset_default_value
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_HWInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_is_config_valid
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>hal_uart_put_char</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_uart.o(i.hal_uart_put_char))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_output_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[89]"></a>hal_uart_set_format</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, hal_uart.o(i.hal_uart_set_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hal_uart_set_format &rArr; halUART_SetFormat
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_SetFormat
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_is_config_valid
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[58]"></a>halgetGPIO_DIN</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal_gpio_7687.o(i.halgetGPIO_DIN))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_status
</UL>

<P><STRONG><a name="[59]"></a>halgetGPIO_DOUT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_gpio_7687.o(i.halgetGPIO_DOUT))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_status
</UL>

<P><STRONG><a name="[57]"></a>halgetGPIO_OutEnable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal_gpio_7687.o(i.halgetGPIO_OutEnable))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_status
</UL>

<P><STRONG><a name="[74]"></a>i2c_configure</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, i2c.o(i.i2c_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_configure &rArr; halI2CInit &rArr; halI2CClearFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CMasterCtrl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CInit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
</UL>

<P><STRONG><a name="[75]"></a>i2c_enable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, i2c.o(i.i2c_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = i2c_enable &rArr; DMA_GetChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannel
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Clock_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
</UL>

<P><STRONG><a name="[78]"></a>i2c_read_via_mcu</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, i2c.o(i.i2c_read_via_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = i2c_read_via_mcu &rArr; halI2CNormalRead &rArr; i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
</UL>

<P><STRONG><a name="[3e]"></a>i2c_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.i2c_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = i2c_send &rArr; hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_init
</UL>

<P><STRONG><a name="[79]"></a>i2c_write_via_mcu</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, i2c.o(i.i2c_write_via_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
</UL>

<P><STRONG><a name="[16]"></a>log_hal_error_internal</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, hal_log.o(i.log_hal_error_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = log_hal_error_internal &rArr; hal_nvic_save_and_set_interrupt_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_save_and_set_interrupt_mask
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_restore_interrupt_mask
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrC_main (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_wait_transaction_finish
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_via_mcu
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_via_mcu
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
</UL>

<P><STRONG><a name="[4]"></a>main</STRONG> (Thumb, 392 bytes, Stack size 104 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = main &rArr; MPU_READ &rArr; hal_i2c_master_send_polling &rArr; i2c_write_via_mcu &rArr; halI2CNormalWrite &rArr; i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;top_xtal_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pinmux_set_function
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_delay_ms
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_direction
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_get_input
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_raw_to_voltage
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_READ
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1115_READ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7e]"></a>pinmux_config</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, pinmux.o(i.pinmux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pinmux_config &rArr; halPinmuxTopOnPadFunc &rArr; halGPIO_ConfDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPinmuxTopOnPadFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pinmux_set_function
</UL>

<P><STRONG><a name="[41]"></a>top_mcu_freq_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, top.o(i.top_mcu_freq_get))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[61]"></a>top_xtal_freq_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, top.o(i.top_xtal_freq_get))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_SetFormat
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CMasterCtrl
</UL>

<P><STRONG><a name="[8f]"></a>top_xtal_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, top.o(i.top_xtal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = top_xtal_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>uart_output_char</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.uart_output_char))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_put_char
</UL>

<P><STRONG><a name="[88]"></a>uart_reset_default_value</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, uart.o(i.uart_reset_default_value))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[76]"></a>hal_i2c_index_irq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_i2c_master.o(i.hal_i2c_index_irq))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
</UL>

<P><STRONG><a name="[73]"></a>hal_i2c_translate_port</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_i2c_master.o(i.hal_i2c_translate_port))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_send_polling
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_receive_polling
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_i2c_master_init
</UL>

<P><STRONG><a name="[64]"></a>i2c_master_wait_transaction_finish</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, hal_i2c.o(i.i2c_master_wait_transaction_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = i2c_master_wait_transaction_finish &rArr; hal_gpt_get_free_run_count &rArr; CM4_GPT4Init &rArr; GPT_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_free_run_count
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpt_get_duration_count
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_and_set_interrupt_mask (via Veneer)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_interrupt_mask (via Veneer)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hal_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halI2CNormalRead
</UL>

<P><STRONG><a name="[7f]"></a>hal_uart_check_irq_disable</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hal_uart.o(i.hal_uart_check_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_uart_check_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUART_Get_VFIFO_Length
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_channel_to_dma_channel
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Vfifo_disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback1
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback0
</UL>

<P><STRONG><a name="[86]"></a>hal_uart_is_config_valid</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal_uart.o(i.hal_uart_is_config_valid))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[7]"></a>hal_uart_receive_callback0</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_uart.o(i.hal_uart_receive_callback0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_uart_receive_callback0 &rArr; hal_uart_check_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(.constdata)
</UL>
<P><STRONG><a name="[8]"></a>hal_uart_receive_callback1</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_uart.o(i.hal_uart_receive_callback1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_uart_receive_callback1 &rArr; hal_uart_check_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_translate_port
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>hal_uart_translate_port</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_uart.o(i.hal_uart_translate_port))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_set_format
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_available_receive_bytes
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback1
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_receive_callback0
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>

<P><STRONG><a name="[81]"></a>uart_channel_to_dma_channel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_uart.o(i.uart_channel_to_dma_channel))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_check_irq_disable
</UL>

<P><STRONG><a name="[7a]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_nvic.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nvic_register_isr_handler
</UL>

<P><STRONG><a name="[4b]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[43]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[4e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
